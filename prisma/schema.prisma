generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id             Int       @id @default(autoincrement())
  email          String    @unique @db.VarChar(180)
  username       String    @unique @db.VarChar(88)
  introduction   String    @default("") @db.VarChar(670)
  password       String    @db.VarChar(99)
  ideas          content[]
  stories        story[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  totpSecret     String?   @db.TinyText
  totpEnabled    Boolean   @default(false)
  subscriptionId Int?
  admin          Boolean   @default(false)
}

model purchase {
  id          Int      @id @default(autoincrement())
  contact     String   @db.VarChar(180)
  paidAmount  Float
  name        String   @db.VarChar(180)
  purchasedAt DateTime @default(now())
  content     content  @relation(fields: [contentId], references: [id])
  contentId   Int      @unique
}

model subscription {
  id                 Int                 @id @default(autoincrement())
  status             subscription_status 
  startDateThisRound DateTime
  endDateThisRound   DateTime
  paymentMethod      payment_method
  updatedAt          DateTime            @updatedAt
  initAt             DateTime            @default(now())
  planChosen         plan                @relation(fields: [planId], references: [id])
  planId             Int
  userId             Int
}

model plan {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(120)
  price        Float
  description  String         @db.VarChar(3000) // Description of the plan separated by |||
  subscription subscription[]
}

model content {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(350)
  sold      Boolean   @default(false)
  author    user      @relation(fields: [authorId], references: [id])
  authorId  Int
  content   String    @db.Text
  medias    media[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tags      tag[]     @relation("content_tags")
  price     Float?
  purchase  purchase?
}

model writing {
  id        Int      @id @default(autoincrement())
  title     String   @unique @db.VarChar(350)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String   @db.MediumText
  story     story    @relation(fields: [storyId], references: [id])
  storyId   Int
}

model story {
  id          Int       @id @default(autoincrement())
  title       String    @unique @db.VarChar(350)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  description String    @unique @db.VarChar(620)
  chapters    writing[]
  author      user      @relation(fields: [userId], references: [id])
  userId      Int
}

model forum {
  id        Int        @id @default(autoincrement())
  subforums subforum[] // Each forum has multiple subforums
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model subforum {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(260) // Restricted to 260 characters
  description String   @db.VarChar(440)
  forum       forum    @relation(fields: [forumId], references: [id])
  forumId     Int
  topics      topic[] // Each subforum has multiple topics
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model topic {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(350) // Restricted to 350 characters
  description String    @db.VarChar(440)
  subforum    subforum  @relation(fields: [subforumId], references: [id])
  subforumId  Int
  comments    comment[] // Each topic can have multiple comments
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  labels      label[]
}

model comment {
  id        Int            @id @default(autoincrement())
  text      String?        @db.Text
  media     illustration[] // Optional media content for comment
  topic     topic          @relation(fields: [topicId], references: [id])
  topicId   Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  labels    label[]
}

model tag {
  id      Int       @id @default(autoincrement())
  name    String    @unique @db.VarChar(105)
  content content[] @relation("content_tags")
}

model label {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(105)
  topic     topic?   @relation(fields: [topicId], references: [id])
  topicId   Int?
  comment   comment? @relation(fields: [commentId], references: [id])
  commentId Int?
}

model media {
  id        Int        @id @default(autoincrement())
  url       String // Path or URL of the image
  content   content    @relation(fields: [contentId], references: [id])
  contentId Int
  type      media_type
}

model illustration {
  id        Int        @id @default(autoincrement())
  url       String // Path or URL of the image
  comment   comment    @relation(fields: [commentId], references: [id])
  commentId Int
  type      media_type
}

enum subscription_status {
  active
  expired
  cancelled
}

enum payment_method {
  paypal
  stripe
}

enum media_type {
  video
  image
}
