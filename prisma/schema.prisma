// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model creator {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  username       String         @unique
  introduction   String         @default("Like a Chinese Idiom, the fishes longing to jump and transform into dragon from the water they reside, so do I to be amazing in creating unique and provking content for the world to admire!")
  password       String // Store hashed passwords
  ideas          content[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  totpSecret     String? // TOTP secret key, nullable if not enabled
  totpEnabled    Boolean        @default(false) // Track whether TOTP is enabled for the user
  subscriptionId Int
  subscription   subscription[]
}

model financer {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  username       String         @unique
  password       String // Store hashed passwords
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  purchased      content[]
  subscriptionId Int
  subscription   subscription[]
}

model subscription {
  id            Int                 @id @default(autoincrement())
  status        subscription_status // e.g., 'active', 'cancelled', 'expired'
  startDate     DateTime            @default(now())
  endDate       DateTime?
  paymentMethod payment_method
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  creator       creator?            @relation(fields: [creatorId], references: [id])
  financer      financer?           @relation(fields: [financerId], references: [id])
  planChosen    plan                @relation(fields: [planId], references: [id])
  planId        Int
  creatorId     Int?
  financerId    Int?
}

model plan {
  id           Int            @id @default(autoincrement())
  name         String // e.g., 'Basic', 'Premium'
  price        Float // Monthly subscription fee
  description  String // Description of the plan
  subscription subscription[]
}

model content {
  id         Int       @id @default(autoincrement())
  title      String
  sold       Boolean   @default(false)
  author     creator   @relation(fields: [creatorId], references: [id])
  content    String    @db.Text // For long text up to 5000 words
  medias     media[] // Relation to Image model (max 15)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  tags       tag[]     @relation("contenttags")
  financer   financer? @relation(fields: [financerId], references: [id])
  creatorId  Int
  financerId Int?
}

model tag {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  content content[] @relation("contenttags")
}

model media {
  id        Int     @id @default(autoincrement())
  url       String // Path or URL of the image
  content   content @relation(fields: [contentId], references: [id])
  contentId Int
}

enum subscription_status {
  active
  expired
  cancelled
}

enum payment_method {
  paypal
  stripe
}
